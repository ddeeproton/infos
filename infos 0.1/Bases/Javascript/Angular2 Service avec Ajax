L'observable

// Pour comprendre les observables
http://rxmarbles.com


on utilise un observable quand on ne sait pas quand ca va arriver
un observable recois plusieurs valeurs par plusieurs events, et le promise par plusieurs promise.
Si personne n'écoute l'événement, alors l'évenement ne sera pas exécuté.
L'observable peut-être arrêté mais pas le promise.


==================================

//JSON en Ajax (utilisation d'observable)

//Le serveur json sera dispo sur 
http://localhost:3000

package.json > voir "api":"json-server --watch ..."
package.json > rajouter une data en frère du tableau d'object "products" qui s'appellera "user"

//Si @angular/http n'est pas disponible pour un import:
npm install --save @angular/http

puis ajouter dans systemjs.config.js la ligne suivante:
'@angular/http': 'npm:@angular/http/bundles/http.umd.js',

Ajouter ceci dans app.module.ts
import { HttpModule } from '@angular/http';
@NgModule({
  imports: [
    HttpModule,
	...
  ],
	...
})



//====== Dans product.service.ts ===========
import { Injectable } from '@angular/core';
import { Http, Response } from '@angular/http';

import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/do';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/map';

import { IProduct } from './product';

@Injectable()
export class ProductService {
    private _productUrl = 'api/products/products.json';

    constructor(private _http: Http) { }

    getProducts(): Observable<IProduct[]> {
        return this._http.get(this._productUrl)
            .map((response: Response) => <IProduct[]> response.json().products)
            .do(data => console.log('All: ' +  JSON.stringify(data)))
            .catch(this.handleError);
    }

    getProduct(id: number): Observable<IProduct> {
        return this.getProducts()
            .map((products: IProduct[]) => products.find(p => p.id === id));
    }

    private handleError(error: Response) {
        // in a real world app, we may send the server to some remote logging infrastructure
        // instead of just logging it to the console
        console.error(error);
        return Observable.throw(error.json().error || 'Server error');
    }
}

//====== Dans product-list.component.ts ===========


ngOnInit(): void {
	this._productService.getProducts().subscribe(
		products => this.products = products,
		error => this.errorMessage = <any>error
	);
}
