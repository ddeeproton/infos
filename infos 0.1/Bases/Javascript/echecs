<?php

class page {
	public static function chess(){
		html::head();
		html::chess();
		html::footer();
	}
	public static function login($name=""){
		html::head();
		html::login($name);
		html::footer();
	}
}


class db{
	public static function save($file,$data){
		$content = serialize($data);
		//var_dump($content);
		file_put_contents($file,$content);
	}
	public static function load($file){
		return unserialize(files::read($file));
	}
}


class ajax{
	public static function getPions(){
		echo json_encode(pions::get());
	}
}



class player{
	public $name;
	public $room;

	public function save(){
		db::save($GLOBALS['config']['data_player'],[
			$this->name,
			$this->room
		]);
		return true;
	}
	public function load(){
		list($this->name,
			$this->room) = db::load($GLOBALS['config']['data_player']);
		return true;
	}
}

class game{
	public static function start($color1 = "white", $color2 = "black"){
		$pawns = array("rook","knight","bishop","queen","king","bishop","knight","rook");
		$result = array();
		$x = 1;
		foreach($pawns as $p) {
			$result[".x".$x.".y1"] = $p." ".$color2;
			$result[".x".$x.".y2"] = "pawn ".$color2;
			$result[".x".$x.".y7"] = "pawn ".$color1;
			$result[".x".$x.".y8"] = $p." ".$color1;
			$x++;
		}
		return $result;
	}
	public function movePion(){
		//if(){
			url::get("room");
			url::get("pion");
			url::get("posx");
			url::get("posy");
		//}
	}
}

class rooms{
	public $room_name;
	public $player_name;
	public $player_name2;
	public $file;

	public function save(){
		$this->file = $GLOBALS['config']['rooms']."/".$this->room_name;
		db::save($this->file,[
			$this->room_name,
			$this->player_name,
			$this->player_name2
		]);
		return true;
	}
	public function load(){
		if(isset($this->file) && is_file($this->file)){
			$file = $this->file;
		}else{
			$this->file = $GLOBALS['config']['rooms']."/".$this->room_name;
		}
		list(
			$this->room_name,
			$this->player_name,
			$this->player_name2
		) = db::load($file);
		return true;
	}
}


class pions{
	public static function get(){
		return pions::start("black","white");
	}
	public static function start($color1 = "white", $color2 = "black"){
		$pawns = array("rook","knight","bishop","queen","king","bishop","knight","rook");
		$result = array();
		$x = 1;
		foreach($pawns as $p) {
			$result[".x".$x.".y1"] = $p." ".$color2;
			$result[".x".$x.".y2"] = "pawn ".$color2;
			$result[".x".$x.".y7"] = "pawn ".$color1;
			$result[".x".$x.".y8"] = $p." ".$color1;
			$x++;
		}
		/*
		$result[".x3.y8"] = "knight black";
		$result[".x5.y6"] = "pawn black";
		*/
		return $result;
	}
}


class html {
	public static function head(){
	?>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
	<meta http-equiv="cache-control" content="no-cache">
	<meta http-equiv="expires" content="0">
	<meta charset="UTF-8" />
	<meta http-equiv="content-type" content="text/html; charset=utf-8" >
	<link rel="icon" href="_includes/template/production/images/ico/favicon.ico">
	<title>Echecs</title>
	<link rel="stylesheet" type="text/css" media="all" href="style.css" />
	<style>
		body{background:#000;color:#fff;}
		ul {list-style-type:none;margin:0;padding:0;}
		.clr {clear:both;}
		.chess {width:880px;height:880px;margin:0 auto;}
		.case {float:left;position:relative;width:110px;height:110px;}
		.case.white {background:#0ff;}
		.case.black {background:#04f;}
		.case span {display:none;position:absolute;top:5px;left:5px;width:100px;height:100px;border-radius:55px;background:#0f0;}
		.case p {display:nonee;position:absolute;top:-5px;left:5px;width:100px;height:90px;background-image:url(pions.svg);background-repeat:no-repeat;background-position:100px 0;}
		.case p.black,
		.case p.white {cursor:pointer;}
		.case p.king.black {background-position:10px 0;}
		.case p.king.white {background-position:10px -140px;}
		.case p.queen.black {background-position:-160px 0;}
		.case p.queen.white {background-position:-160px -140px;}
		.case p.rook.black {background-position:-325px 0;} /* Tour */
		.case p.rook.white {background-position:-325px -140px;}
		.case p.bishop.black {background-position:-494px 0;} /* Fou */
		.case p.bishop.white {background-position:-494px -140px;}
		.case p.knight.black {background-position:-660px 0;} /* Cheval */
		.case p.knight.white {background-position:-660px -140px;}
		.case p.pawn.white {background-position:-827px -140px;} /* Pion */
		.case p.pawn.black {background-position:-827px 0;}
	</style>
</head>
<body>
	<?php
	}

	public static function login($name){
	?>
		<form>
			<label>Nom:<input name="name" value="<?php echo $name; ?>" /></label>
			<input type=hidden name="action" value="login" />
			<input type=submit value="ok" />
		</form>
	<?php
	}

	public static function rooms($player){
		?>
		<h1>Jouer avec un joueur</h1>
		<ul>
			<?php
			foreach(files::listDir($GLOBALS['config']['players']) as $p){
				$playername = files::filename($p);
				if($playername == $player->name) continue;
				?>
				<li>
					<form>
						<input type=hidden name="name" value="<?php echo $player->name; ?>" />
						<input type=hidden name="name2" value="<?php echo $playername; ?>" />
						<input type=hidden name="action" value="play" />
						<input type=submit value="Jouer avec <?php echo $playername; ?>" />
					</form>
				</li>
				<?php
			}
			?>
		</ul>
		<ul>
		<?php
		$rooms = $GLOBALS['config']['rooms'];
		if(!is_dir($rooms)) {
			files::makedir($rooms);
		}
		foreach(files::listDir($rooms) as $f){
			?>
				<li>
					<form>
						<h1><?php echo $f; ?></h1>
						<input type=hidden name="room" value="<?php echo $f; ?>" />
						<input type=hidden name="action" value="join" />
						<?php
						if($f == $player->room){
							?>
							<input type=submit value="Jouer" />
							<?php
						}else{
							?>
							<input type=submit value="Observer" />
							<?php
						}
						?>
					</form>
				</li>
			<?php
		}
		?>
		</ul>
		<?php
	}

	public static function chess(){
	?>
	<div class="chess">
		<ul>
		<?php
			$alt = false;
			for($y=1;$y<=8;$y++){
				for($x=1;$x<=8;$x++){
					$colors = $alt ? "black" : "white";
					?>
					<li class="case x<?php echo $x; ?> y<?php echo $y; ?> <?php echo $colors; ?>">
						<span></span>
						<p></p>
						<input type=hidden class=x value=<?php echo $x; ?>>
						<input type=hidden class=y value=<?php echo $y; ?>>
						<input type=hidden class=p>
					</li>
					<?php
					$alt = !$alt;
				}
				$alt = !$alt;
			}
		?>
		</ul>
		<div class=clr></div>
	</div>
	<script type="text/javascript" src="jquery-1.11.1.js"></script>
	<!--<script type="text/javascript" src="scripts.js"></script>-->
	<script type="text/javascript">
		document.write('<style>.noscript { display: none; }</style>');

		
		var game = {		
			myColor: "",
			start : function(myColor){
				game.myColor = myColor;
				$(document).ready(function(){
					bind.onGridClick();
					game.getPions();
				});
			},
			reset : function(myColor){
				$(".case p").removeClass("black white pawn knight bishop rook queen king");
				$(".case .p").val("");
			},
			getPions : function(){
				$.getJSON("?action=getPions", function( data ) {
					//alert(data);
					game.reset();
					$.each(data, function(key, val) {
						//alert(key+" " +val);

						$(".case"+key+" p").addClass(val);
						$(".case"+key+" .p").val(val);
					});
				});
			},
			switchPlayer : function(){
				game.myColor = game.myColor == "white" ? "black" : "white";
				// read all grid
				var tab = new Array();
				$(".chess ul li").each(function(i){
					var base = this;
					var x = $(".x",base).val();
					var y = $(".y",base).val();
					if(tab[x] == undefined) {
						tab[x] = new Array();
					}
					tab[x][y] = $(".p",base).val();

				});
				game.reset();
				// set game
				for(var x = 1; x < tab.length; x++){
					for(var y = 1; y < tab[x].length; y++){
						var p = tab[x][tab[x].length-y];
						if(p!="" && p != undefined){
							var d = p.split(" ");
							var piece = d[0];
							var color = d[1];
							// Set piece
							$(".chess ul li.x"+x+".y"+y+" p").addClass(piece).addClass(color);
							$(".chess ul li.x"+x+".y"+y+" .p").val(piece+" "+color);
						}
					}
				}
			}
		};

		var bind = {			
			onGridClick : function(){
				$(".chess ul li").each(function(i){
					var base = this;
					$(base).click(function(){
						
						var x = $(".x",base).val();
						var y = $(".y",base).val();
						// On clique sur une capsule verte pour bouger une pièce
						var isMoving = $(".chess ul li.x"+x+".y"+y+" span").is(":visible");

						// Reset selection
						$(".chess ul li").css("cursor","normal");
						$(".chess ul li span").hide();


						if(isMoving){
							//alert("click move");
							var p = $(".p",base).val();
							// Si mange une pièce
							var piece = "";
							var color = "";
							if(p!=""){
								var d = p.split(" ");
								piece = d[0];
								color = d[1];
								//alert("Mange: "+piece+" "+color);
								$(".chess ul li.x"+x+".y"+y+" .p").val("");
								$(".chess ul li.x"+x+".y"+y+" p").removeClass(piece+" "+color);
							}

							/*
							console.log(
								"myPiece:"+selection.piece
								+"\nmyColor:"+selection.color
								+"\notherPiece:"+piece
								+"\notherColor:"+color
								+"\nstartX:"+x
								+"\nstartY:"+y
								+"\nselectX:"+selection.x
								+"\nselectY:"+selection.y
							);
							*/
							
							// Set empty start position
							$(".chess ul li.x"+selection.x+".y"+selection.y+" p").removeClass(selection.piece+" "+selection.color);
							$(".chess ul li.x"+selection.x+".y"+selection.y+" .p").val("");
							// Move piece
							$(".chess ul li.x"+x+".y"+y+" p").addClass(selection.piece+" "+selection.color);
							// Memorise piece
							$(".chess ul li.x"+x+".y"+y+" .p").val(selection.piece+" "+selection.color);
							// Change de joueur
							game.switchPlayer();
						}else{
							//alert("click select");
							var p = $(".p",base).val();
							// Si click sur case vide
							if(p==""){
								//alert("return");
								return;
							}

							var d = p.split(" ");
							var piece = d[0];
							var color = d[1];
						
							if(color != game.myColor) return;
						
							selection.x = x;
							selection.y = y;
							selection.color = color;
							selection.piece = piece;
							if(piece=="pawn") {
								selection.pawn(x,y);
							}
							if(piece=="queen") {
								selection.queen(x,y);
							}
							if(piece=="king") {
								selection.king(x,y);
							}
							if(piece=="bishop") { // fou
								selection.bishop(x,y);
							}
							if(piece=="rook") { // tour
								selection.rook(x,y);
							}
							if(piece=="knight") { // cheval
								selection.knight(x,y);
							}
						}
					});
				});
			}
		};


		var selection = {
			x: "",
			y: "",
			color: "",
			piece: "",
			pawn :function(x,y){
				var max;
				if(y==7) {
					max = 2;
				}else{
					max = 1;
				}
				
				
				var pieceDevant = $(".chess ul li.x"+x+".y"+(parseInt(y)-1)+" .p").val();
				// S'il n'y a pas de pièce devant notre pion
				if(pieceDevant==""){
					direction.top(x,y,max);
				}
				
				var pieceCoinDroit = $(".chess ul li.x"+(parseInt(x)+1)+".y"+(parseInt(y)-1)+" .p").val();
				// S'il y a une pièce sur le coin droit de notre pion
				if(pieceCoinDroit != ""){
					direction.topright(x,y,1);
				}
				
				var pieceCoinGauche = $(".chess ul li.x"+(parseInt(x)-1)+".y"+(parseInt(y)-1)+" .p").val();
				// S'il y a une pièce sur le coin gauche de notre pion
				if(pieceCoinGauche !=""){
					direction.topleft(x,y,1);
				}

				
				
			},
			bishop :function(x,y){
				direction.topleft(x,y);
				direction.topright(x,y);
				direction.bottomleft(x,y);
				direction.bottomright(x,y);
			},
			rook :function(x,y){
				direction.top(x,y);
				direction.bottom(x,y);
				direction.left(x,y);
				direction.right(x,y);
			},
			queen :function(x,y){
				direction.top(x,y);
				direction.bottom(x,y);
				direction.left(x,y);
				direction.right(x,y);
				direction.topleft(x,y);
				direction.topright(x,y);
				direction.bottomleft(x,y);
				direction.bottomright(x,y);
			},
			king :function(x,y){
				direction.top(x,y,1);
				direction.bottom(x,y,1);
				direction.left(x,y,1);
				direction.right(x,y,1);
				direction.topleft(x,y,1);
				direction.topright(x,y,1);
				direction.bottomleft(x,y,1);
				direction.bottomright(x,y,1);
			},
			knight :function(x,y){
				direction.knighttopleft(x,y);
				direction.knightlefttop(x,y);
				direction.knighttopright(x,y);
				direction.knightrighttop(x,y);
				direction.knightbottomleft(x,y);
				direction.knightbottomright(x,y);
				direction.knightrightbottom(x,y);
				direction.knightleftbottom(x,y);
			}
		};

		
		var direction = {			
			draw :function(x,y){
				if($(".chess ul li.x"+x+".y"+y+" .p").length==0) return;
				var p = $(".chess ul li.x"+x+".y"+y+" .p").val();
				var d = p.split(" ");
				var pawn = d[0];
				var color = d[1];
				if(selection.color != color) {
					$(".chess ul li.x"+x+".y"+y+" span").show();
					$(".chess ul li.x"+x+".y"+y).css("cursor","pointer");
				}
				if(p != "") return false;
				return true;
			},
			top :function(x,y,min){ // min est optionnel
				var impact = 0;
				var start = y-1;
				var min = start-min+1 || 1; // valeur par default de min
				for(var i=start;i>=min;i--) {
					if(!direction.draw(x,i)) break;
				}
			},
			bottom :function(x,y,max){ // max est optionnel
				var start = parseInt(y)+1;
				var max = start+max-1 || 8; // valeur par default de max
				for(var i=start;i<=max;i++) {
					if(!direction.draw(x,i)) break;
				}
			},
			left :function(x,y,min){
				var start = x-1;
				var min = start-min+1 || 1; // valeur par default de min
				for(var i=start;i>=min;i--) {
					if(!direction.draw(i,y)) break;
				}
			},
			right :function(x,y,max){
				var start = parseInt(x)+1;
				var max = start+max-1 || 8; // valeur par default de max
				for(var i=start;i<=max;i++) {
					if(!direction.draw(i,y)) break;
				}
			},
			topleft :function(x,y,min){
				var j = parseInt(y)-1;
				var start = parseInt(x)-1;
				var min = start-min+1 || 1; // valeur par default de min
				for(var i=start;i>=min;i--) {
					if(!direction.draw(i,j)) break;
					j--;
				}
			},
			topright :function(x,y,max){
				var j = parseInt(y)-1;
				var start = parseInt(x)+1;
				var max = start+max-1 || 8; // valeur par default de max
				for(var i=start;i<=max;i++) {
					if(!direction.draw(i,j)) break;
					j--;
				}
			},
			bottomleft :function(x,y,min){
				var j = parseInt(y)+1;
				var start = parseInt(x)-1;
				var min = start-min+1 || 1; // valeur par default de min
				for(var i=start;i>=min;i--) {
					if(!direction.draw(i,j)) break;
					j++;
				}
			},
			bottomright :function(x,y,max){
				var j = parseInt(y)+1;
				var start = parseInt(x)+1;
				var max = start+max-1 || 8; // valeur par default de max
				for(var i=start;i<=max;i++) {
					if(!direction.draw(i,j)) break;
					j++;
				}
			},
			knighttopleft :function(x,y){
				var i = parseInt(x)-2;
				var j = parseInt(y)-1;
				direction.draw(i,j);
			},
			knightlefttop :function(x,y){
				var i = parseInt(x)-1;
				var j = parseInt(y)-2;
				direction.draw(i,j);
			},
			knighttopright :function(x,y){
				var i = parseInt(x)+2;
				var j = parseInt(y)-1;
				direction.draw(i,j);
			},
			knightrighttop :function(x,y){
				var i = parseInt(x)+1;
				var j = parseInt(y)-2;
				direction.draw(i,j);
			},
			knightbottomleft :function(x,y){
				var i = parseInt(x)-2;
				var j = parseInt(y)+1;
				direction.draw(i,j);
			},
			knightleftbottom :function(x,y){
				var i = parseInt(x)-1;
				var j = parseInt(y)+2;
				direction.draw(i,j);
			},
			knightrightbottom :function(x,y){
				var i = parseInt(x)+1;
				var j = parseInt(y)+2;
				direction.draw(i,j);
			},
			knightbottomright :function(x,y){
				var i = parseInt(x)+2;
				var j = parseInt(y)+1;
				direction.draw(i,j);
			}
		};


		// START GAME
		game.start("black");
		
	</script>
	<?php
	}

	public static function footer(){
		?>
			</body>
		</html>
		<?php

	}
}


class url{
	public static function get($var){
		return url::_get($var) == "" ? url::_post($var) : url::_get($var)  ;
	}

	public static function _get($var){
		return isset($_GET[$var]) ? $_GET[$var] : "";
	}

	public static function _post($var){
		return isset($_POST[$var]) ? $_POST[$var] : "";
	}
}



class files {

 	public static function listDir($dir, $type = GLOB_NOSORT){
		if(is_dir($dir)) $dir .='/*';
		$files = glob($dir, $type);
		return is_array($files) ? $files : array();
	}

 	public static function getFileExtention($file){
		$t = array();
		$t = explode(".", $file);
		if(count($t)>0) {
			return $t[count($t)-1];
		}else{
			return "";
		}
	}

 	public static function filename($file){
		$t = array();
		if(strpos($file, "/") !== false) {
			$exp = "/";
		}elseif(strpos($file, "\\") !== false) {
			$exp = "\\";
		}else{
			return $file;
		}
		$t = explode($exp, $file);
		if(count($t)>0) {
			return $t[count($t)-1];
		}else{
			return "";
		}
	}

	public static function getParentPath($dir) {
		$dirname = files::filename($dir);
		return substr($dir,0,strlen($dir)-strlen($dirname));
	}

 	public static function makedir($dir){
		if(is_dir($dir)) return;
		$oldumask = umask(0000);
		mkdir($dir);
		umask($oldumask);
	}

	function copyDir($source, $dest){
		global $lasterror;
		if (is_file($source)) {
			return copy($source, $dest);
		}
		if (!is_dir($dest)) {
			mkdir($dest);
		}
		$success = true;
		$lasterror = "";
		$dir = dir($source);
		while (false !== $entry = $dir->read()) {
			if ($entry == '.' || $entry == '..') {
				continue;
			}
			if($success) {
				$success = files::copyDir("$source/$entry", "$dest/$entry");
				if(!$success) $lasterror .= "Error on copy file:\n\t$source/$entry\n\t=> $dest/$entry";
			}else{
				files::copyDir("$source/$entry", "$dest/$entry");
			}
		}
		$dir->close();
		return $success;
	}

// -----------------------------------------------------------------------------
//  Fonction: Lit le contenu d'un fichier
//    @parametres:
//      $file : Chemin du fichier
//    @retourne:  Le contenu du fichier
//------------------------------------------------------------------------------
 	public static function read($file){
		if(is_file($file) && filesize($file) > 0) {
			$fp = fopen($file, "rb");
			$txt = fread($fp, filesize($file));
			fclose($fp);
			return $txt;
		}
	}


// -----------------------------------------------------------------------------
//  Fonction: Ecrire dans un fichier
//    @parametres:
//      $file : Chemin du fichier
//		$txt : Contenu du fichier
//    @retourne:  rien
//------------------------------------------------------------------------------

	public static function write($file, $txt){
	    $fp = fopen($file,"w+");
	    fputs($fp, $txt);
	    fclose($fp);
	}



 	public static function readFast($file){
		readfile($file);
	}
 	public static function readFastToString($file){
		return is_file($file) ? file_get_contents($file) : '';
	}
 	public static function writeFast($file, $txt){
		file_put_contents($file, $txt);
	}

// -----------------------------------------------------------------------------
// @param int $bytes Number of bytes (eg. 25907)
// @param int $precision [optional] Number of digits after the decimal point (eg. 1)
// @return string Value converted with unit (eg. 25.3KB)
// -----------------------------------------------------------------------------

	public static function convertSizeformat($bytes, $precision = 2) {
		$unit = array("o", "Ko", "Mo", "Go");
		$exp = floor(log($bytes, 1024)) | 0;
		return round($bytes / (pow(1024, $exp)), $precision).' '.$unit[$exp];
	}


}






$config = array();
$player = new player();
$rooms = new rooms();
$game = new game();

$config['rooms'] = "rooms";
$config['players'] = "players";

$name = url::get("name");
if($name != "") {
	if(!is_dir($config['players'])){
		files::makedir($config['players']);
	}
	$config['data_player'] = $config['players']."/".$name;
	if(is_file($config['data_player'])) {
		$player->load();
	}
}

switch(url::get("action")){
	case "getPions":
		ajax::getPions();
	break;
	case "play":
		if(isset($config['data_player'])){
			//$player->name = url::get("name");
			$player->room = url::get("room");
			$player->save();
			page::chess();
		}
	break;
	case "join":
		if(isset($config['data_player'])){
			$player->name = url::get("name");
			$player->room = url::get("room");
			$player->save();
			page::chess();
		}
	break;
	case "login":
		$name = url::get("name");
		if($name == "") {
			page::login();
		}else{
			if(!is_file($config['data_player'])) {
				$player->name = $name;
				$player->room = "";
				$player->save();
			}
			html::rooms($player);
		}
	break;
	default:
		page::login();
	break;
}


?>












