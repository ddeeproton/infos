{  Programme exemple de transfert de fichier par Client/ServerSocket
   Ce programme n'est pas fait pour remplcaer des logiciels de transfert. Mais
   il présente la méthode pour envoyer un fichier d'un ordinateur à un autre via
   un réseau supportant TCPIP.

   Par  Nono40   <bruno_g40@Hotmail.com>

   30/06/2002 : Création
                publication du www.DelphiFR.com
   08/07/2002 : Ajout des commentaires

   Comme d'habitude : c'est libre de droits, et c'est pas garanti.

   P.S. : la procédure d'affichage des codes d'erreur est issue d'un source publié par djtexas.
}


unit Unit1;

interface

uses
  Windows, Messages, SysUtils,  Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, ScktComp, ExtCtrls;

type
  TForm1 = class(TForm)
    Client: TClientSocket;
    Serveur: TServerSocket;
    GroupBox1: TGroupBox;
    btnOpen: TButton;
    btnClose: TButton;
    MemoServeur: TMemo;
    GroupBox2: TGroupBox;
    btnEnvoyer: TButton;
    btnStop: TButton;
    Edit1: TEdit;
    Ouvrir: TOpenDialog;
    MemoClient: TMemo;
    RetardDebut: TTimer;
    procedure btnOpenClick(Sender: TObject);
    procedure btnCloseClick(Sender: TObject);
    procedure ServeurClientConnect(Sender: TObject;
      Socket: TCustomWinSocket);
    procedure ServeurClientDisconnect(Sender: TObject;
      Socket: TCustomWinSocket);
    procedure ServeurClientError(Sender: TObject; Socket: TCustomWinSocket;
      ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure ServeurClientRead(Sender: TObject; Socket: TCustomWinSocket);
    procedure ClientConnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure ClientDisconnect(Sender: TObject; Socket: TCustomWinSocket);
    procedure ClientError(Sender: TObject; Socket: TCustomWinSocket;
      ErrorEvent: TErrorEvent; var ErrorCode: Integer);
    procedure btnEnvoyerClick(Sender: TObject);
    procedure ClientRead(Sender: TObject; Socket: TCustomWinSocket);
    procedure btnStopClick(Sender: TObject);
    procedure RetardDebutTimer(Sender: TObject);
  private
    { Déclarations privées }
  public
    { Déclarations publiques }
  end;

var
  Form1: TForm1;


implementation

{$R *.dfm}

//**************************************************************************************
//
//  Principe :
//    le fichier envoyé en coupé en tranches de taille identiques et e transmises au serveur
//    dans l'ordre du fichier.
//
//    - Le client se connecte au serveur.
//    - Si la connection est OK alors il envoie un trame du type ci-dessous avec ttType=1
//      signalant qu'il s'agit du nom du fichier. ttNomFichier est alors le nom du fichier
//      transféré.
//    - Si le serveur accepte la demande, alors le fichier est envoyé par morceau avec le même
//      type de trame. ttType = 2 pour signaler qu'il s'agit un morceau du fichier. ttDebut
//      donne l'adresse du bloc dans le fichier et ttLong la taille du bloc.
//    - Le client se deconnecte, ce qui ferme le fichier sur le serveur.
//
//**************************************************************************************



//**************************************************************************************
//  Procédure d'affichage en clair des erreurs socket
//  merci à djtexas
Function MessageErreurSocket( ErrorEvent: TErrorEvent; var ErrorCode: Integer):String;
var
    ErrorMsg: string;
begin
    // définition du message d'erreur en fonction du code d'erreur
    case ErrorCode of
        10004 : ErrorMsg := 'Interrupted function call.';
        10013 : ErrorMsg := 'Permission Refusée.';
        10014 : ErrorMsg := 'Mauvaise adresse.';
        10022 : ErrorMsg := 'Arguments Invalides.';
        10024 : ErrorMsg := 'Trop de fichiers ouverts.';
        10035 : ErrorMsg := 'Resource temporarily unavailable.';
        10036 : ErrorMsg := 'Operation en cours.';
        10037 : ErrorMsg := 'Operation déjà en cours.';
        10038 : ErrorMsg := 'Socket operation on non-socket.';
        10039 : ErrorMsg := 'Destination address required.';
        10040 : ErrorMsg := 'Message trop long.';
        10041 : ErrorMsg := 'Protocol wrong type for socket.';
        10042 : ErrorMsg := 'Bad protocol option.';
        10043 : ErrorMsg := 'Protocol not supported.';
        10044 : ErrorMsg := 'Socket type not supported.';
        10045 : ErrorMsg := 'Operation not supported.';
        10046 : ErrorMsg := 'Protocol family not supported.';
        10047 : ErrorMsg := 'Address family not supported by protocol family.';
        10048 : ErrorMsg := 'Address already in use.';
        10049 : ErrorMsg := 'Cannot assign requested address.';
        10050 : ErrorMsg := 'Network is down.';
        10051 : ErrorMsg := 'Network is unreachable.';
        10052 : ErrorMsg := 'Network dropped connection on reset.';
        10053 : ErrorMsg := 'Software caused connection abort.';
        10054 : ErrorMsg := 'Connection reset by peer.';
        10055 : ErrorMsg := 'No buffer space available.';
        10056 : ErrorMsg := 'Socket is already connected.';
        10057 : ErrorMsg := 'Socket is not connected.';
        10058 : ErrorMsg := 'Cannot send after socket shutdown.';
        10060 : ErrorMsg := 'Connection timed out.';
        10061 : ErrorMsg := 'Connection refused.';
        10064 : ErrorMsg := 'Host is down.';
        10065 : ErrorMsg := 'No route to host.';
        10067 : ErrorMsg := 'Too many processes.';
        10091 : ErrorMsg := 'Network subsystem is unavailable.';
        10092 : ErrorMsg := 'WINSOCK.DLL version out of range.';
        10093 : ErrorMsg := 'Successful WSAStartup not yet performed.';
        10094 : ErrorMsg := 'Graceful shutdown in progress.';
        11001 : ErrorMsg := 'Host not found.';
        11002 : ErrorMsg := 'Non-authoritative host not found.';
        11003 : ErrorMsg := 'This is a non-recoverable error.';
        11004 : ErrorMsg := 'Valid name, no data record of requested type.';
    else
        // erreur inconnue
        ErrorMsg := 'Unknown socket error.';
    end;
    // mise en forme de la signification de l'erreur
    ErrorMsg := 'Socket Error n°' + IntToStr(ErrorCode) + ' : ' + ErrorMsg;
    // l'erreur est traitée
    ErrorCode := 0;
    // définition du type d'erreur
    case ErrorEvent of
        eeSend           : ErrorMsg := 'Writing ' + ErrorMsg;
        eeReceive       : ErrorMsg := 'Reading ' + ErrorMsg;
        eeConnect       : ErrorMsg := 'Connecting ' + ErrorMsg;
        eeDisconnect : ErrorMsg := 'Disconnecting ' + ErrorMsg;
        eeAccept         : ErrorMsg := 'Accepting ' + ErrorMsg;
    else
        // erreur inconnue
        ErrorMsg := 'Unknown ' + ErrorMsg;
    end;
    Result:=ErrorMsg;
end;
//
//**************************************************************************************



//**************************************************************************************
//    Structure de la trame utilisée pour les échanges
//
Const
  TailleBloc = 256;
Type
  TIPTrame=Packed Record
    Case ttType:Integer Of                          // ttType précise le type de la trame
                                                    //  =1 quand c'est un nom de fichier
                                                    //  =2 quand c'est un morceau du fichier
    1:(
        ttNomFichier:String[255];                   // Nom du fichier
      );
    2:( ttDebut : Integer;                          // Adresse de début des données dans le fichier
        ttLong  : Integer;                          // Longueur des données envoyées
        ttDatas : Array[0..TailleBloc-1] Of Byte )  // Données envoyées
  End;
//
//**************************************************************************************



//**************************************************************************************
//  SERVEUR
//  Cette partie ne concerne que le serveur
Var
  ServeurEnReception    : Boolean = False;     // =True quand une réception est en cours
  ServeurAdresseClient  : String  = '';        // Adresse du client connecté
  ServeurFichier        : File;                // Fichier utilisé pour la sauvegarde des morceaux


procedure TForm1.btnOpenClick(Sender: TObject);
begin
  // Bouton de mise en écoute du serveur, c'est tout simple
  Serveur.Open;
  MemoServeur.Lines.Add('Serveur en écoute');
end;

procedure TForm1.btnCloseClick(Sender: TObject);
begin
  // Bouton de fermeture du serveur, c'est aussi tout simple
  If     ServeurEnReception
     And (MessageDlg('Un transfert est en cours, fermer le serveur ?',mtConfirmation,[mbYes,mbNo],0)=mrYes)
  Then Begin
    Serveur.Close;
    MemoServeur.Lines.Add('Serveur desactivé');
  End;
end;

//
// évènements du socket serveur
//
procedure TForm1.ServeurClientConnect(Sender: TObject;
  Socket: TCustomWinSocket);
begin
  // C'est juste pour signaler
  MemoServeur.Lines.Add('OnConnect:'+Socket.RemoteAddress);
end;

procedure TForm1.ServeurClientDisconnect(Sender: TObject;
  Socket: TCustomWinSocket);
begin
  MemoServeur.Lines.Add('OnDisconnect:'+Socket.RemoteAddress);
  // Le client se deconnecte => ou ferme le fichier en cours si besoin
  If ServeurEnReception
  Then Begin
    CloseFile(ServeurFichier);
    ServeurEnReception:=False;
  End;
end;

procedure TForm1.ServeurClientError(Sender: TObject;
  Socket: TCustomWinSocket; ErrorEvent: TErrorEvent;
  var ErrorCode: Integer);
begin
  // On ne fait que signaler l'erreur
  MemoServeur.Lines.Add('OnClientError:'+Socket.RemoteAddress+#13+MessageErreurSocket(ErrorEvent,ErrorCode));
end;

procedure TForm1.ServeurClientRead(Sender: TObject;
  Socket: TCustomWinSocket);
Var Buffer:TIPTrame;
    Erreur:Integer;
    Recus :Integer;
begin
  // C'est ici la partie principale du serveur
  // Cette procédure est appelée à chaque écriture d'un client

  Erreur  :=0;
  Recus   :=Socket.ReceiveLength;    // Longueur reçue ( en octets )
  MemoServeur.Lines.Add('OnRead'+Socket.RemoteAddress+' reçus '+IntToStr(Recus));

  If Recus<= SizeOf(Buffer)         // On vérifie que la longueur reçue tient dans la trame
                                    // sinon attention au plantage !!!
  Then With Buffer Do Begin
    // Lecture de la trame reçue
    Socket.ReceiveBuf(Buffer,Recus);

    // En fonction du type de la trame on effectue les traitements
    Case ttType Of
      1:Begin
        // C'est une nouvelle demande, on vérifie le nom du fichier
        // La longueur de la trame doit être au minimumu de
        //   4 ( taille de ttType ) + 1 ( longueur de la chaine ttNomFichier ) + Length(ttNomFichier)
        If (Recus>=5)And(Recus>=(5+Length(ttNomFichier)))
        Then Begin
          // La longueur est bonne, on accepte la demande
          MemoServeur.Lines.Add(ttNomFichier);

          // On ferme le fichier précédent au cas ou
          If ServeurEnReception Then CloseFile(ServeurFichier);

          // On ouvre le fichier de réception en écriture
          AssignFile(ServeurFichier,ExtractFilePath(ParamStr(0))+ttNomFichier);
          Try
            Rewrite(ServeurFichier,1);
            ServeurEnReception:=True;
            Erreur:=0;
          Except
            Erreur:=5; // Erreur de création du fichier
          End;
        End
        Else Erreur:=2; // La longueur reçue est trop courte
      End;

      2:Begin
        // On reçoit un morceau de fichier
        // La longueur de la trame doit être au minimumu de
        //   4 ( taille de ttType ) + 4 ( taille de ttDebut ) + 4 ( taille de ttLong )
        //    + ttLong ( nombre de données envoyées )
        If (Recus>=12)And(Recus>=(12+ttLong))
        Then Begin
          // Le morceau n'est accepté que si une demande est en cours
          If ServeurEnReception
          Then Begin
            // Le morceau n'est accepté que si le début du fichier à déjà été reçu
            If (ttDebut>=0)And(ttDebut<=FileSize(ServeurFichier))
            Then Begin
              Try
                // Si tout est bon on écrit le morceau dans le fichier
                Seek(ServeurFichier,ttDebut);
                BlockWrite(ServeurFichier,ttDatas,ttLong);
                Erreur:=0;  // C'est bon
              Except
                Erreur:=6; // Erreur d'écriture du fichier
              End;
            End
            Else Erreur:=4; // La position 'début' n'est pas correcte
          End
          Else Erreur:=3; // On n'a pas reçue de demande
        End
        Else Erreur:=2; // La longueur reçue est trop courte
      End;

    End;// fin du case
  End
  Else Erreur:=1; // La longueur reçue est trop grande

  // Dans tout les cas on envoie le code d'erreur au client
  Socket.SendBuf(Erreur,4);
  MemoServeur.Lines.Add('  Code de retour :'+IntToStr(Erreur));
end;
// fin de la partie serveur
//**************************************************************************************



//**************************************************************************************
//  CLIENT
//  Cette partie ne concerne que le client
Var
  ClientFichier   : File;       // Fichier en cours d'envoi
  ClientTrame     : TIPTrame;   // Copie de la dernière trame envoyée

procedure TForm1.btnEnvoyerClick(Sender: TObject);
begin
  // Bouton envoyer, c'est le début
  // On demande bien sur en premier le nom de fichier à transférer
  If Not Ouvrir.Execute Then Exit;
  AssignFile(ClientFichier,Ouvrir.FileName);

  // On ouvre le fichier en lecture
  Reset(ClientFichier,1);

  // On essaye de se connecter au serveur
  Client.Address:=Edit1.Text;
  Client.Open;
end;

procedure TForm1.ClientConnect(Sender: TObject; Socket: TCustomWinSocket);
begin
  // La connection est réussie
  MemoClient.Lines.Add('OnConnect:'+Socket.RemoteAddress);

  // On demande alors l'envoi de la trame d'entête
  ClientTrame.ttType:=1;
  ClientTrame.ttNomFichier:=ExtractFileName(Ouvrir.FileName);

  // La demande est différée par un petit timer car il est interdit
  // d'écrire dans un OnConnect
  btnEnvoyer.Enabled:=False;
  RetardDebut.Enabled:=True;
end;

procedure TForm1.RetardDebutTimer(Sender: TObject);
begin
  // Cette demande n'est faite qu'une fois par fichier
  RetardDebut.Enabled:=False;

  // On envoie au serveur la trame avec le nom du fichier
  Client.Socket.SendBuf(ClientTrame,4+Length(ClientTrame.ttNomFichier)+1);
  MemoClient.Lines.add('Envoi de l''entête');
end;

Procedure EnvoiBlocEnCours;
Begin
  With ClientTrame Do
  Begin
    // Procédure d'envoi d'un morceau de fichier
    // est appelée par ClientRead

    // C'est une trame de type morceau de fichier
    ttType:=2;

    // Lecture dans le fichier
    Seek(ClientFichier,ttDebut);
    BlockRead(ClientFichier,ttDatas,TailleBloc,ttLong);

    // Envoi du morceau
    // La longueur envoyée est
    //   4 ( taille de ttType ) + 4 ( taille de ttDebut ) + 4 ( taille de ttLong )
    //    + ttLong ( nombre de données envoyé )
    Form1.Client.Socket.SendBuf(ClientTrame,ttLong+12);
    Form1.MemoClient.Lines.add('Envoi du morceau '+IntToStr(ttDebut)+'['+IntToStr(ttLong)+']');
  End;
End;

procedure TForm1.ClientRead(Sender: TObject; Socket: TCustomWinSocket);
Var CodeRetour:Integer;
begin
  With ClientTrame Do
  Begin
    // On reçoit le code d'erreur du serveur, on le traite suivant les cas
    MemoClient.Lines.Add('OnRead:'+Socket.RemoteAddress);
    Socket.ReceiveBuf(CodeRetour,4);

    Case ttType Of
      1:Begin
          // La dernière demande était un nom de fichier
          // On teste le code de retour
          If CodeRetour=0
          Then Begin
            // Par d'erreur, l'envoi réel peut donc commencer
            ttDebut:=0;
            EnvoiBlocEnCours;
          End
          Else Begin
            // Le serveur refuse le fichier demandé => on arrète
            MemoClient.Lines.Add('Erreur '+IntToStr(CodeRetour));
            Client.Close;
          End;
        End;

      2:Begin
          // La dernière demande était un morceau de fichier
          // On teste le code de retour
          If CodeRetour=0
          Then Begin
            // Pas d'erreur on avance dans le fichier de la longueur envoyée précédemment
            Inc(ttDebut,ttLong);
            If ttDebut>=FileSize(ClientFichier)
              Then Client.Close        // C'est la fin du fichier, on ferme la connection
              Else EnvoiBlocEnCours;   // ce n'est pas la fin, on envoie le morceau
          End
          Else Begin
            // Une erreur à eut lieu, on envoie le même morceau
            MemoClient.Lines.Add('Erreur '+IntToStr(CodeRetour));
            EnvoiBlocEnCours;
          End;
        End;

      Else
        // Normalement on ne doit pas passer ici.
        // au cas ou, on ferme la connection
        Client.Close;
    End;
  End;
end;

procedure TForm1.ClientDisconnect(Sender: TObject;
  Socket: TCustomWinSocket);
begin
  // à la déconnection on ferme le fichier est cours de lecture
  MemoClient.Lines.Add('OnDisonnect:'+Socket.RemoteAddress);
  btnEnvoyer.Enabled:=True;
  CloseFile(ClientFichier);
end;

procedure TForm1.ClientError(Sender: TObject; Socket: TCustomWinSocket;
  ErrorEvent: TErrorEvent; var ErrorCode: Integer);
begin
  // On ne fait que signaler l'erreur
  MemoServeur.Lines.Add('OnClientError:'+Socket.RemoteAddress+#13+MessageErreurSocket(ErrorEvent,ErrorCode));
end;

procedure TForm1.btnStopClick(Sender: TObject);
begin
  // Arrêt du transfert en cours
  RetardDebut.Enabled:=False;
  Client.Close;
end;
// fin de la partie client
//**************************************************************************************

end.