unit Unit1;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, XPMan, ExtCtrls, ImgList, ComCtrls, ToolWin;

type
  TSauvegarde = class(TThread)                      
    cmd:String;
    EnMemo:TMemo;
    h: Cardinal;
  protected
    procedure Execute(); override;
  public
    procedure Execute2(cmd:String; EnMemo:TMemo);
    procedure RunDosInMemo(Que:String;EnMemo:TMemo);
  end;

  TForm1 = class(TForm)
    Button1: TButton;
    Memo2: TMemo;
    Button2: TButton;
    XPManifest1: TXPManifest;
    Image4: TImage;
    GroupBox1: TGroupBox;
    Image5: TImage;
    GroupBox2: TGroupBox;
    Image2: TImage;
    GroupBox3: TGroupBox;
    GroupBox4: TGroupBox;
    Image1: TImage;
    Image3: TImage;
    Memo1: TMemo;
    ToolBar1: TToolBar;
    ToolButton1: TToolButton;
    ImageList1: TImageList;
    ToolButton2: TToolButton;
    ToolButton3: TToolButton;
    ToolButton4: TToolButton;
    ToolButton5: TToolButton;
    ToolButton6: TToolButton;
    ToolButton7: TToolButton;
    ToolButton8: TToolButton;
    ToolButton9: TToolButton;
    ToolButton10: TToolButton;
    ToolButton11: TToolButton;
    ToolButton12: TToolButton;
    ToolButton13: TToolButton;
    ToolButton14: TToolButton;
    ToolButton15: TToolButton;
    ToolButton16: TToolButton;
    ToolButton17: TToolButton;
    ToolButton18: TToolButton;
    ToolButton19: TToolButton;
    ToolButton20: TToolButton;
    ToolButton21: TToolButton;
    ToolButton22: TToolButton;
    procedure Button1Click(Sender: TObject);
    procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
    procedure Button2Click(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form1: TForm1;
  listThreads: array of TSauvegarde;
implementation

{$R *.dfm}


procedure SplitStr(const Source, Delimiter: String; var DelimitedList: TStringList);
var
  s: PChar;
  DelimiterIndex: Integer;
  Item: String;
begin
  s:=PChar(Source);
  repeat
    DelimiterIndex:=Pos(Delimiter, s);
    if DelimiterIndex=0 then Break;
    Item:=Copy(s, 1, DelimiterIndex-1);
    DelimitedList.Add(Item);
    inc(s, DelimiterIndex + Length(Delimiter)-1);
  until DelimiterIndex = 0;
  DelimitedList.Add(s);
end;


procedure OnOutput(txt:String);
var
  sl: TStringList;
  // 04.03.17; 09:33:09; 127.0.0.1; 185.22.116.72; tf1.fr.
  date:string;
  time:string;
  ipclient:string;
  ipdomain:string;
  domain:string;

begin
  sl:=TStringList.Create;
  SplitStr(txt,';',sl);
  form1.Memo1.Lines.Add(sl.Text);
  form1.Memo1.Lines.Add(IntToStr(sl.Count));
  if sl.Count >= 5 then
  begin
    date:sl.ValueFromIndex[0];
    time:sl.ValueFromIndex[1];
    ipclient:sl.ValueFromIndex[2];
    ipdomain:sl.ValueFromIndex[3];
    domain:sl.ValueFromIndex[4];
    //form1.Memo1.Lines.Add(sl.ValueFromIndex[4]);

    
  end;
  sl.Free;
end;


procedure TSauvegarde.RunDosInMemo(Que:String;EnMemo:TMemo);
   const
      CUANTOBUFFER = 2000;
   var
     Seguridades         : TSecurityAttributes;
     PaLeer,PaEscribir   : THandle;
     start               : TStartUpInfo;
     ProcessInfo         : TProcessInformation;
     Buffer              : Pchar;
     BytesRead           : DWord;
     CuandoSale          : DWord;
     tb                  : PDWord;

     procedure readFromPipe;
      begin
       Repeat
         BytesRead := 0;
         {Llenamos un troncho de la pipe, igual a nuestro buffer}
         PeekNamedPipe(PaLeer, nil, 0, nil, tb, nil);
         if tb^=0 then
           break;
         ReadFile(PaLeer,Buffer[0],CUANTOBUFFER,BytesRead,nil);
         {La convertimos en una string terminada en cero}
         Buffer[BytesRead]:= #0;
         {Convertimos caracteres DOS a ANSI}
         OemToAnsi(Buffer,Buffer);

         OnOutput(String(Buffer));
         EnMemo.Lines.Add(String(Buffer));
         //form1.Memo1.Lines.Add(String(Buffer));

       until (BytesRead < CUANTOBUFFER);
     end;
begin
  With Seguridades do
  begin
    nlength              := SizeOf(TSecurityAttributes);
    binherithandle       := true;
    lpsecuritydescriptor := nil;
  end;
  {Creamos el pipe...}
  if Createpipe (PaLeer, PaEscribir, @Seguridades, 0) then
  begin
    Buffer  := AllocMem(CUANTOBUFFER + 1);
    FillChar(Start,Sizeof(Start),#0);
    start.cb          := SizeOf(start);
    start.hStdOutput  := PaEscribir;
    start.hStdInput   := PaLeer;
    start.hStdError   := PaEscribir;
    start.dwFlags     := STARTF_USESTDHANDLES +
                         STARTF_USESHOWWINDOW;
    start.wShowWindow := SW_HIDE;

    if CreateProcess(nil,
      PChar(Que),
      @Seguridades,
      @Seguridades,
      true,
      NORMAL_PRIORITY_CLASS,
      nil,
      nil,
      start,
      ProcessInfo)
    then
    begin
      h := ProcessInfo.hProcess;
      {Espera a que termine la ejecucion}
      new(tb);
      repeat
        CuandoSale := WaitForSingleObject( ProcessInfo.hProcess,100);
        readFromPipe;
        Application.ProcessMessages;
      until (CuandoSale <> WAIT_TIMEOUT);
      {Leemos la Pipe}
      dispose(tb);
    end;
    FreeMem(Buffer);
    try
      CloseHandle(ProcessInfo.hProcess);
      CloseHandle(ProcessInfo.hThread);
      CloseHandle(PaLeer);
      CloseHandle(PaEscribir);
    finally
    end;
  end;
end;

procedure TSauvegarde.Execute();
begin
  //RunDosInMemo('ping.exe 127.0.0.1', Form1.Memo1);
  RunDosInMemo(cmd, EnMemo);
end;

procedure TSauvegarde.Execute2(cmd:String; EnMemo:TMemo);
begin
  RunDosInMemo(cmd, EnMemo);
end;




procedure ecrireDansUnFichier(Fichier: string; txt : string);
var
  Fp : textfile;
begin
  assignFile(Fp, Fichier);
  reWrite(Fp); // ouvre en lecture
  Writeln(Fp, txt);
  closefile(Fp);
end;

procedure createVBScript();
var
  script: string;
begin
  script :=   '#!/usr/bin/env python'#13#10+
  'import sys, subprocess'#13#10+
  'import socket'#13#10+
  'import dns.resolver'#13#10+
  'from dns.exception import DNSException'#13#10+
  'import time'#13#10+
  'import sys'#13#10+
  ''#13#10+
  '#import MySQLdb'#13#10+
  ''#13#10+
  '#============================='#13#10+
  '# FastDNS version 0.1'#13#10+
  '#============================='#13#10+
  '# Requirements:'#13#10+
  '# [Pyhton]'#13#10+
  '#  http://www.python.org/getit/'#13#10+
  '#'#13#10+
  '# [dnspython]'#13#10+
  '#  http://www.dnspython.org/'#13#10+
  '#'#13#10+
  '# [MySQL-python]'#13#10+
  '#  http://sourceforge.net/projects/mysql-python/'#13#10+
  '#'#13#10+
  '# [MySQL server]'#13#10+
  '#  http://dev.mysql.com/downloads/'#13#10+
  '#'#13#10+
  '# Create table SQL'#13#10+
  '# CREATE TABLE IF NOT EXISTS `dnscache` (`domain` varchar(255) NOT NULL,`ip` varchar(15) NOT NULL,`banned` tinyint(1) NOT NULL, UNIQUE KEY `domain` (`domain`)) TYPE=InnoDB;'#13#10+
  '#============================='#13#10+
  ''#13#10+
  '#============================='#13#10+
  '# CONFIGURATION'#13#10+
  '#============================='#13#10+
  ''#13#10+
  ''#13#10+
  '# MySQL'#13#10+
  'config_dbhost = "192.168.0.1"'#13#10+
  'config_dbuser = "root2"'#13#10+
  'config_dbpasswd = ""'#13#10+
  'config_dbname = "DNSdata"'#13#10+
  'config_dbtable = "dnscache"'#13#10+
  'config_dbport = 33006'#13#10+
  ''#13#10+
  '# Relay DNS'#13#10+
  '#config_dnsrelay = [''209.244.0.3'',''209.244.0.4'']'#13#10+
  'config_dnsrelay = [''192.168.0.65'']'#13#10+
  'config_dnstimeout = 5'#13#10+
  ''#13#10+
  '#Client DNS'#13#10+
  'config_cache_sql = 0  # [ 0 | 1 ] utilise la base MySQL en priorite'#13#10+
  'config_cache_memory = 1 # [ 0 | 1 ] utilise la memoire pour stocker les resolutions'#13#10+
  ''#13#10+
  '# Server DNS'#13#10+
  'config_dnsip = ''0.0.0.0'''#13#10+
  'if len(sys.argv) > 1:'#13#10+
  '	if sys.argv[1] == ''config_dnsip'':'#13#10+
  '		if len(sys.argv) > 2:'#13#10+
  '			config_dnsip = sys.argv[2]'#13#10+
  '			'#13#10+
  '# hostfile = ''hosts ''+config_dnsip+''.txt'''#13#10+
  'hostfile = ''hosts.txt'''#13#10+
  'if len(sys.argv) > 3:'#13#10+
  '	if sys.argv[3] == ''hostfile'':'#13#10+
  '		if len(sys.argv) > 2:'#13#10+
  '			hostfile = sys.argv[4]'#13#10+
  ''#13#10+
  'config_dnsport = 53'#13#10+
  'config_delayerror = 1'#13#10+
  ''#13#10+
  'config_display = True'#13#10+
  ''#13#10+
  '# Banned countries'#13#10+
  '#config_banned_countries = [''us'',''uk'',''il'',''ie'']'#13#10+
  '#config_banned_countries = [''il'']'#13#10+
  'config_banned_countries = []'#13#10+
  ''#13#10+
  'cache_domains = []'#13#10+
  'cache_ips = []'#13#10+
  ''#13#10+
  '#============================='#13#10+
  '# SQL'#13#10+
  '#============================='#13#10+
  ''#13#10+
  ''#13#10+
  ''#13#10+
  ''#13#10+
  'class DNSClient:'#13#10+
  '	def __init__(self, nameservers, timeout):'#13#10+
  '		self.res = dns.resolver.Resolver()'#13#10+
  '		self.res.nameservers = nameservers'#13#10+
  '		self.res.timeout = timeout'#13#10+
  ''#13#10+
  '	def dnsResolve(self, domain):'#13#10+
  '		res = 0'#13#10+
  '		try:'#13#10+
  '			answer = self.res.query(domain, "A")'#13#10+
  '			res = "%s" % answer[0]'#13#10+
  '		except dns.resolver.NoAnswer:'#13#10+
  '			print "Error: No AAAA record for", dnss.domain," ", data'#13#10+
  '			sys.stdout.flush()'#13#10+
  '		except dns.resolver.NXDOMAIN:'#13#10+
  '			print "Error: The name ", dnss.domain, " does not exist"'#13#10+
  '			sys.stdout.flush()'#13#10+
  '		except DNSException:'#13#10+
  '			print ''Error: DNS Exception: '', dnss.domain'#13#10+
  '			sys.stdout.flush()'#13#10+
  '		return res'#13#10+
  ''#13#10+
  'class DNSServer:'#13#10+
  '	def __init__(self, ip, port, delayerror):'#13#10+
  '		self.udps = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)'#13#10+
  '		try:'#13#10+
  '			self.udps.bind((ip,port))'#13#10+
  '		except:'#13#10+
  '			print "Error: Port ",port," already used (wait ",delayerror," seconds before close)"'#13#10+
  '			sys.stdout.flush()'#13#10+
  '			time.sleep(delayerror)'#13#10+
  '			sys.exit(0)'#13#10+
  ''#13#10+
  '	def recieveQuery(self):'#13#10+
  '		try:'#13#10+
  '			return self.udps.recvfrom(1024)'#13#10+
  '		except:'#13#10+
  '			print "Error: recieving data on UDP server"'#13#10+
  '			sys.stdout.flush()'#13#10+
  ''#13#10+
  '	def sendQuery(self, answer, addr):'#13#10+
  '		self.udps.sendto(answer, addr)'#13#10+
  ''#13#10+
  '	def close(self):'#13#10+
  '		self.udps.close()'#13#10+
  '		print ''Close'''#13#10+
  '		sys.stdout.flush()'#13#10+
  ''#13#10+
  'class DNSQuery:'#13#10+
  '	def __init__(self, data):'#13#10+
  '		try:'#13#10+
  '			self.data=data'#13#10+
  '			self.domain='''''#13#10+
  '			#tipo : Opcode query type =  [ standard (0) | inverse (1) | server status (2) ]'#13#10+
  '			tipo = (ord(data[2]) >> 3) & 15	 # Opcode bits'#13#10+
  '			if tipo == 0:					 # Standard query'#13#10+
  '				ini=12'#13#10+
  '				lon=ord(data[ini])'#13#10+
  '				while lon != 0:'#13#10+
  '					self.domain+=data[ini+1:ini+lon+1]+''.'''#13#10+
  '					ini+=lon+1'#13#10+
  '					lon=ord(data[ini])'#13#10+
  '		except:'#13#10+
  '			return ""'#13#10+
  ''#13#10+
  '	def dnsAnswer(self, ip):'#13#10+
  '		packet='''''#13#10+
  '		if self.domain and len(self.domain) > 0:'#13#10+
  '			packet+=self.data[:2] + "\x81\x80"'#13#10+
  '			packet+=self.data[4:6] + self.data[4:6] + ''\x00\x00\x00\x00''	 # Questions and Answers Counts'#13#10+
  '			packet+=self.data[12:]											 # Original Domain Name Question'#13#10+
  '			packet+=''\xc0\x0c''												 # Pointer to domain name'#13#10+
  '			packet+=''\x00\x01\x00\x01\x00\x00\x00\x3c\x00\x04''				 # Response type, ttl and resource data length -> 4 bytes'#13#10+
  '			try:'#13#10+
  '				packet+=str.join('''',map(lambda x: chr(int(x)), ip.split(''.''))) 	 # 4bytes of IP'#13#10+
  '			except:'#13#10+
  '				return ""'#13#10+
  '		return packet'#13#10+
  ''#13#10+
  '	def checkHost(self, domain):'#13#10+
  '		domain = domain[:-1]'#13#10+
  '		res = '''';'#13#10+
  '		#fp = open(''C:\WINDOWS\system32\drivers\etc\hosts'', ''r'')'#13#10+
  '		fp = open(hostfile, ''r'')'#13#10+
  '		#fp = open(''/mnt/sdcard2/!prog/hosts'', ''r'')'#13#10+
  '		for line in fp.readlines():'#13#10+
  '			#print line'#13#10+
  '			if "	"+domain in line:'#13#10+
  '				res = line.split("	")[0]'#13#10+
  '			if " "+domain in line:'#13#10+
  '				res = line.split("	")[0]'#13#10+
  '		fp.close()'#13#10+
  '		if res <> "":'#13#10+
  '			if res[0] == "#":'#13#10+
  '				res = '''';'#13#10+
  '		return res'#13#10+
  ''#13#10+
  '	def onlyDomain(self, domain):'#13#10+
  '		d = domain[:-1]'#13#10+
  '		data = d.split(".")'#13#10+
  '		if len(data) <= 2:'#13#10+
  '			return d'#13#10+
  '		result=""'#13#10+
  '		start = len(data) - 2'#13#10+
  '		for i in range(start,len(data),1):'#13#10+
  '			result = result + data[i] + "."'#13#10+
  '		if result <> '''':'#13#10+
  '			return result[:-1]'#13#10+
  ''#13#10+
  ''#13#10+
  '	def resolveDomain(self, domain, idstatus):'#13#10+
  '	'#13#10+
  '		if config_cache_memory == 1:'#13#10+
  '			if domain in cache_domains:'#13#10+
  '				i = cache_domains.index(domain)'#13#10+
  '				return cache_ips[i]'#13#10+
  '			else:'#13#10+
  '				cache_domains.append(domain)'#13#10+
  '				'#13#10+
  '		if ".in-addr.arpa" in domain:'#13#10+
  '			if config_display:'#13#10+
  '				print "ARPA"'#13#10+
  '			if config_cache_memory == 1:'#13#10+
  '				cache_ips.append("127.0.0.1")'#13#10+
  '			return "127.0.0.1"'#13#10+
  '			'#13#10+
  '		IPHost = dnss.checkHost(domain)'#13#10+
  '		if IPHost <> '''':'#13#10+
  '			if config_display:'#13#10+
  '				print "Host file domain:"'#13#10+
  '			if config_cache_memory == 1:'#13#10+
  '				cache_ips.append(IPHost)'#13#10+
  '			return IPHost'#13#10+
  ''#13#10+
  ''#13#10+
  '			'#13#10+
  '		d = dnss.onlyDomain(domain)'#13#10+
  '		#print d'#13#10+
  '		nameservers = config_dnsrelay'#13#10+
  '		ip = dnsc.dnsResolve(domain) # Ask the Primary DNS server'#13#10+
  '		if ip == 0:'#13#10+
  '			if config_cache_memory == 1:'#13#10+
  '				cache_ips.append("127.0.0.1")'#13#10+
  '			return "127.0.0.1"'#13#10+
  '			'#13#10+
  '		#db.sqlsetdomain(domain, ip) # Add IP in database'#13#10+
  '		if config_cache_memory == 1:'#13#10+
  '			cache_ips.append(ip)'#13#10+
  '		return ip'#13#10+
  ''#13#10+
  '		'#13#10+
  ''#13#10+
  'class SQLConnexion:'#13#10+
  '	def __init__(self, dbhost, dbport, dbuser, dbpasswd, dbname, dbtable):'#13#10+
  ''#13#10+
  '                time.sleep(5)'#13#10+
  '		self.db = MySQLdb.connect(host=dbhost, port=dbport, user=dbuser, passwd=dbpasswd, db=dbname)'#13#10+
  '		self.cur = self.db.cursor()'#13#10+
  '		self.tablecache = dbtable '#13#10+
  '		try:'#13#10+
  '			time.sleep(5)'#13#10+
  '			self.db = MySQLdb.connect(host=dbhost, port=dbport, user=dbuser, passwd=dbpasswd, db=dbname)'#13#10+
  '			self.cur = self.db.cursor()'#13#10+
  '			self.tablecache = dbtable    '#13#10+
  '		except:'#13#10+
  '			print "Error connexion database MySQL"'#13#10+
  '			sys.stdout.flush()'#13#10+
  '			time.sleep(5)'#13#10+
  '			sys.exit(0)'#13#10+
  ''#13#10+
  '	def close(self):'#13#10+
  '		self.cur.close()'#13#10+
  '		self.db.close()'#13#10+
  ''#13#10+
  '	def sqlquery(self, query):'#13#10+
  '		try:'#13#10+
  '			self.cur.execute(query)'#13#10+
  '		except MySQLdb.Error, e:'#13#10+
  '			print "Error %d: %s" % (e.args[0], e.args[1])'#13#10+
  '			print "Query SQL \n %s" % query'#13#10+
  '			sys.stdout.flush()'#13#10+
  '			self.db.rollback()'#13#10+
  '			time.sleep(5)'#13#10+
  ''#13#10+
  '	def sqlgetdomain(self, domain):'#13#10+
  '		res = 0'#13#10+
  '		self.sqlquery("SELECT * FROM `"+self.tablecache+"` WHERE `domain` = ''"+domain[:-1]+"'';")'#13#10+
  '		resultcount = int(self.cur.rowcount)'#13#10+
  '		if resultcount > 0:'#13#10+
  '			q = self.cur.fetchall()'#13#10+
  '			ip = q[0][1]'#13#10+
  '			banned = q[0][2]'#13#10+
  '			if banned == 1:'#13#10+
  '				res = "127.0.0.1"'#13#10+
  '			else:'#13#10+
  '				res = ip'#13#10+
  '		return res'#13#10+
  ''#13#10+
  '	def sqlsetdomain(self, domain, ip):'#13#10+
  '		self.sqlquery("DELETE FROM `"+self.tablecache+"` WHERE `domain` = ''"+domain[:-1]+"'';")'#13#10+
  '		self.db.commit()'#13#10+
  '		self.sqlquery("INSERT INTO `"+self.tablecache+"` (`domain` ,`ip` ,`banned`) VALUES (''"+domain[:-1]+"'', ''"+ip+"'', ''0'');")'#13#10+
  '		self.db.commit()'#13#10+
  ''#13#10+
  '	def sqlgetcountry(self, ip):'#13#10+
  '		self.sqlquery("SELECT country FROM ip2nation WHERE ip < INET_ATON(''"+ip+"'') ORDER BY ip DESC LIMIT 0,1;")'#13#10+
  '		resultcount = int(self.cur.rowcount)'#13#10+
  '		if resultcount > 0:'#13#10+
  '			q = self.cur.fetchall()'#13#10+
  '			country = q[0][0]'#13#10+
  '			return country'#13#10+
  '		else:'#13#10+
  '			return "unkown"'#13#10+
  ''#13#10+
  '	def sqlgetcountryname(self, ip):'#13#10+
  '		self.sqlquery("SELECT c.country FROM ip2nationCountries c, ip2nation i WHERE i.ip < INET_ATON(''"+ip+"'') AND  c.code = i.country ORDER BY i.ip DESC LIMIT 0,1;")'#13#10+
  '		resultcount = int(self.cur.rowcount)'#13#10+
  '		if resultcount > 0:'#13#10+
  '			q = self.cur.fetchall()'#13#10+
  '			country = q[0][0]'#13#10+
  '			return country'#13#10+
  '		else:'#13#10+
  '			return "unkown"'#13#10+
  ''#13#10+
  'if __name__ == ''__main__'':'#13#10+
  '	print ''Started'''#13#10+
  '	sys.stdout.flush()'#13#10+
  '	if config_cache_sql == 1:'#13#10+
  '                db = SQLConnexion(config_dbhost, config_dbport, config_dbuser, config_dbpasswd, config_dbname, config_dbtable) # SQL Connexion'#13#10+
  '	dnsc = DNSClient(config_dnsrelay, config_dnstimeout) # DNS Client'#13#10+
  '	udps = DNSServer(config_dnsip, config_dnsport, config_delayerror) # DNS Server'#13#10+
  '	'#13#10+
  '	try:'#13#10+
  '		while 1:'#13#10+
  '			req = udps.recieveQuery() # recieve UDP data (usually on port 53)'#13#10+
  '			if not req:'#13#10+
  '				continue'#13#10+
  '			data, addr = req # recieve UDP data (usually on port 53)'#13#10+
  '			dnss = DNSQuery(data) # Parse DNS query'#13#10+
  '			'#13#10+
  '			isArpa = ".in-addr.arpa" in dnss.domain'#13#10+
  '			country = ''unkown'''#13#10+
  '			answer = ''127.0.0.1'''#13#10+
  '			if isArpa:'#13#10+
  '				print ''isArpa'''#13#10+
  '				ip = dnss.domain.split(".") '#13#10+
  '				answer = ip[3]+"."+ip[2]+"."+ip[1]+"."+ip[0]'#13#10+
  '				#country = db.sqlgetcountry(answer)'#13#10+
  '				#countryname = db.sqlgetcountryname(answer)'#13#10+
  '				#if country in config_banned_countries:'#13#10+
  '				#answer = answer+"."+country+"."+countryname'#13#10+
  '				#TEST'#13#10+
  '				#answer = ''127.0.0.1'''#13#10+
  '				#print "arpa adress"'#13#10+
  '			else:'#13#10+
  '				#print "normal domain"'#13#10+
  '				'#13#10+
  ''#13#10+
  '				if config_cache_sql == 1: # if domain exists'#13#10+
  ''#13#10+
  '					#UPDATE d''adresse deja existante'#13#10+
  '					#answer = dnsc.dnsResolve(dnss.domain) # Ask the Primary DNS server'#13#10+
  '					#db.sqlsetdomain(dnss.domain, answer) # Add IP in database'#13#10+
  '					answer = db.sqlgetdomain(dnss.domain) # Check if domain exists in database'#13#10+
  '					countryname = db.sqlgetcountryname(answer)'#13#10+
  '					country = db.sqlgetcountry(answer)'#13#10+
  '					if country in config_banned_countries and addr[0] == ''8.8.8.20'':'#13#10+
  '						answer = ''127.0.0.1'''#13#10+
  ''#13#10+
  '					udps.sendQuery(dnss.dnsAnswer(answer), addr) # Send IP to the user'#13#10+
  ''#13#10+
  '				else: # if it''s a new domain'#13#10+
  '					#print "New domain:"'#13#10+
  '					answer = dnss.resolveDomain(dnss.domain, 2) # Ask the Primary DNS server'#13#10+
  '					#answer = dnsc.dnsResolve(dnss.domain) # Ask the Primary DNS server'#13#10+
  '					if answer == 0 :'#13#10+
  '						answer = "127.0.0.1"'#13#10+
  '					else:'#13#10+
  '						#db.sqlsetdomain(dnss.domain, answer) # Add IP in database'#13#10+
  '						#countryname = db.sqlgetcountryname(answer)'#13#10+
  '						#country = db.sqlgetcountry(answer)'#13#10+
  ''#13#10+
  '						#if country in config_banned_countries and addr[0] == ''8.8.8.20'':'#13#10+
  '						#	answer = ''127.0.0.1'''#13#10+
  ''#13#10+
  '						udps.sendQuery(dnss.dnsAnswer(answer), addr) # Send IP to the user'#13#10+
  ''#13#10+
  '			# Display log'#13#10+
  '			heure = time.strftime(''%d.%m.%y; %H:%M:%S'',time.localtime())'#13#10+
  ''#13#10+
  '			'#13#10+
  '			#if answer == ''127.0.0.1'':'#13#10+
  '			#	countryname = '''''#13#10+
  '			#	country = ''local'''#13#10+
  '			#else:'#13#10+
  '			#if answer != ''127.0.0.1'':'#13#10+
  '			#	db.sqlsetdomain(dnss.domain, answer) # Add IP in database'#13#10+
  '			print ''%s; %s; %s; %s'' % (heure, addr[0], answer, dnss.domain)'#13#10+
  '			sys.stdout.flush()'#13#10+
  '	except KeyboardInterrupt:'#13#10+
  '		udps.close()'#13#10;
  ecrireDansUnFichier('relayDNS.py', script);
end;



procedure TForm1.Button1Click(Sender: TObject);
begin
  createVBScript();
  
  SetLength(listThreads, 2);
  listThreads[0] := Unit1.TSauvegarde.Create(True);
  listThreads[0].cmd := '"C:\Python27\python.exe" "relayDNS.py" config_dnsip 127.0.0.1 hostfile host_127.0.0.1.txt';
  listThreads[0].EnMemo := Memo1;
  listThreads[0].Suspended := False;

  listThreads[1] := Unit1.TSauvegarde.Create(True);
  listThreads[1].cmd := 'ping.exe 127.0.0.1';
  listThreads[1].EnMemo := Memo2;
  listThreads[1].Suspended := False;

  //listThreads[0].Terminate;
end;


procedure DestroyProcess(hProcess: Cardinal);
Var
  ovExitCode: LongWord;
begin
  try
    if hProcess<>0 then
    begin
      GetExitCodeProcess(hProcess, ovExitCode);
      if (ovExitCode = STILL_ACTIVE) or (ovExitCode <> WAIT_OBJECT_0) then
        TerminateProcess(hProcess, ovExitCode);
      //CloseHandle(hProcess);
    end;
  except
  end;
end;

procedure TForm1.FormCloseQuery(Sender: TObject; var CanClose: Boolean);
var
  i: Integer;
begin
  for i:=0 to Length(listThreads)-1 do
  begin
    DestroyProcess(listThreads[i].h);
  end;
end;

procedure TForm1.Button2Click(Sender: TObject);
var
  i: Integer;
begin
  for i:=0 to Length(listThreads)-1 do
  begin
    DestroyProcess(listThreads[i].h);
  end;

end;

end.